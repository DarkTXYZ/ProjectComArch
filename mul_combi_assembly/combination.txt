        lw 0 1 n            load data from memory to registers
        lw 0 2 r
        lw 0 6 comAdr
        jalr 6 7            call combi(n,r)
        halt                ends program
combi   sw 5 7 stack        store return address to stack
        lw 0 6 pos1         
        add 5 6 5
        sw 5 1 stack        store n to stack
        add 5 6 5
        sw 5 2 stack        store r to stack
        add 5 6 5
        sw 5 4 stack        store local variable to stack
        add 5 6 5
        beq 2 0 base        check base case condition (r = 0)
        beq 1 2 base        check base case condition (n = r)
        lw 0 6 neg1
        add 1 6 1           n = n - 1
        lw 0 6 comAdr
        jalr 6 7            call combi(n-1,r)
        add 3 0 4           store return value of combi(n-1,r) and local variable to local variable
        lw 0 6 neg1
        add 2 6 2           r = r - 1
        lw 0 6 comAdr
        jalr 6 7            call combi(n-1,r-1)
        add 3 4 3           add return value of combi(n-1,r-1) to result
        beq 0 0 return
base    lw 0 3 pos1         if it is base case , return 1
return  lw 0 6 neg1         
        add 5 6 5
        lw 5 4 stack        load local variable from stack
        add 5 6 5
        lw 5 2 stack        load r from stack
        add 5 6 5
        lw 5 1 stack        load n from stack
        add 5 6 5
        lw 5 7 stack        load return address from stack
        jalr 7 6            jump back to return address
n       .fill 7             n input
r       .fill 3             r input
comAdr  .fill combi         Combination function address
pos1    .fill 1             +1
neg1    .fill -1            -1
stack   .fill 0