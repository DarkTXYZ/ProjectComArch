        lw 0 1 n            load data from memory to registers
        lw 0 3 result
        lw 0 5 stackP
        lw 0 6 fiboAd
        jalr 6 7            call fibo(n)
        halt                ends program
fibo    sw 5 7 stack        store return address to stack
        lw 0 6 pos1         
        add 5 6 5
        sw 5 1 stack        store n to stack
        add 5 6 5
        sw 5 4 stack        store local variable to stack
        add 5 6 5
        beq 1 0 base0       check base case condition (r = 0)
        beq 1 6 base1       check base case condition (n = r)
        lw 0 6 neg1
        add 1 6 1           n = n - 1
        lw 0 6 fiboAd
        jalr 6 7            call fibo(n-1)
        add 3 0 4           store return value of fibo(n-1) to local variable
        lw 0 6 neg1
        add 1 6 1           n = n - 1
        lw 0 6 fiboAd
        jalr 6 7            call fibo(n-2)
        add 3 4 4           add return value of fibo(n-2) to local variable
        add 4 0 3           store local variable value in result
        beq 0 0 return
base1   lw 0 3 pos1         if it is base case (n=1) , return 1
        beq 0 0 return
base0   add 0 0 3           if it is base case (n=0) , return 0
return  lw 0 6 neg1         
        add 5 6 5
        lw 5 4 stack        load local variable from stack
        add 5 6 5
        lw 5 1 stack        load n from stack
        add 5 6 5
        lw 5 7 stack        load return address from stack
        jalr 7 6            jump back to return address
n       .fill 0             n input
result  .fill 0
fiboAd  .fill fibo          Fibonacci function address
stackP  .fill 0             stack pointer
pos1    .fill 1             +1
neg1    .fill -1            -1
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0
stack   .fill 0